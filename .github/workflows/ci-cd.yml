name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Run unit tests
        run: npm run test:unit
      - name: Upload Jest test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: jest-report
          path: jest-report/
          retention-days: 30

  e2e-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: unit-test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Install Playwright Browsers
        run: npx playwright install chromium --with-deps --force

      - name: Start server in background
        run: |
          node dist/index.js &
          echo $! > server.pid

      - name: Wait for server to be ready
        run: |
          for i in {1..10}; do
            curl -sf http://localhost:3000/health && echo "Server is up!" && break
            echo "Waiting for server to start..."
            sleep 2
          done

      - name: Run e2e tests
        run: npm run test:e2e:ci

      - name: Stop server
        if: always()
        run: |
          kill $(cat server.pid) || true

      - name: Upload Playwright test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  docker:
    needs: [unit-test, e2e-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/room-occupancy-api:${{ github.sha }}
